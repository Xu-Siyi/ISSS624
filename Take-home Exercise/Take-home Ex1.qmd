---
title: "Take home ex1"
format: html
editor: visual
---

## Overviewd

## 1 Import data

First of all we load the package that needed: sf, spdep, tmap, tidyverse,dplyr, funModeling

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse,dplyr, funModeling)
```

There are two dataset we used:

-   geo_export:

-   nga_admbnda_adm2_osgof_20190417

change it to shorter name

### 1.1 import waterpoint

```{r}
#| eval: false
wp<- st_read(dsn="geodata",
             layer="geo_export",
             crs=4326) %>%
  filter(clean_coun=="Nigeria")
```

in the

Then I saved it into wp_nga.rds. In this way I can delete geo_export data which is too large to git push.

I add #eval: false to make sure the code chunk will only display

[ref](https://quarto.org/docs/computations/execution-options.html)

```{r}
#| eval: false

wp_nga<-write_rds(wp,"geodata/wp_nga.rds")
```

### 1.2 import Nigeria LGA boundary data

```{r}

nga<- st_read(dsn="geodata",
             layer="geoBoundaries-NGA-ADM2",
             crs=4326)
```

## 2 Data Wrangling

### 2.1 Recoding NA values into string

In the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.

```{r}

wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### 2.2 EDA

In the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.

```{r}
freq(data=wp_nga, 
     input = 'status_cle')
```

## 3 Extracting Water Point Data

In this section, we will extract the water point records by using classes in status_cle field.

### 3.1 Extracting the functional water point data

in this code chunk below, filter() is used to select functional water points

```{r}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

### 3.2 Extracting non-funtional water point

In the code chunk below, filter() of dplyr is used to select non-functional water points.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### 3.3 Extracting water point with Unknown class

In the code chunk below, `filter()` of dplyr is used to select water points with unknown status.

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

```{r}
freq(data=wpt_unknown, 
     input = 'status_cle')
```

## 4 Performing Point-in-Polygon Count

The point-in-polygon (PIP) problem asks whether a given point in the plane lies inside, outside, or on the boundary of a polygon.

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## 5 Saving the Analytical Data Table

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Things to learn from the code chunk above:

`mutate()` of **dplyr** package is used to derive two fields namely pct_functional and pct_non-functional.

to keep the file size small, `select()` of **dplyr** is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.

Now, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
write_rds(nga_wp, "geodata/nga_wp.rds")
```

There is only data file we use, nga_wp.rds, which is the combination of the geospatial and aspatial data.

## 6 Visualising the spatial dsitribution of water points

```{r}
#| fig-width: 14
#| fig-height: 12
nga_wp <- read_rds("geodata/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```

#  2 Outliers/clusters analysis

## 2.1 Global Spatial Autocorrelation

### 2.1.1 Computing Contiguity Spatial Weights

```{r}
wm_q <- poly2nb(nga_wp, 
                queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 774 area units in Hunan. The most connected area unit has 14 neighbours. There are two area units (138 and 560) with only one neighbours.

### 2.1.2 Row-standardised weights matrix

Now we calculate

Because there is 1 region with no links in the NGA data, I use `set.ZeroPolicyOption(TRUE)` to create the Weights Matrix.

```{r}
set.ZeroPolicyOption(TRUE)
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE
                   )
rswm_q
```

### 2.1.3 Global Spatial Autocorrelation: Moran's I

Moran's I is a measure of spatial autocorrelation

I use `moran.test()` of **spdep** to do Moran's I statistics testing

#### 2.1.3.1 Maron's I test

##### **(1)**  **Funtional waterpoint**

```{r}
moran.test(nga_wp$`wpt functional`, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

p-value\<0.01, means we reject Null hypothesis.

###### \*如何解释结果

The code chunk below performs permutation test for Moran\'s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(nga_wp$`wpt functional`, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

In the code chunk below we use hist() and abline() to visualize Monte Carlo Moran's I

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

###### \*什么意思

##### (2) Water-non fuctional

```{r}
moran.test(nga_wp$`wpt non-functional`, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

```{r}
set.seed(1234)
bperm= moran.mc(nga_wp$`wpt non-functional`, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

In the code chunk below we use hist() and abline() to visualize Monte Carlo Moran's I

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

###### \*什么意思

## 2.2 Spatial Correlogram

### 2.2.1 Compute Moran's I correlogram

#### (1) Water functional

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          nga_wp$`wpt functional`, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

```{r}
print(MI_corr)
```

#### (2) Water non-functional

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          nga_wp$`wpt non-functional`, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

```{r}
print(MI_corr)
```

## 2.3 Cluster and Outlier Analysis

I use Local Indicators for Spatial Association (LISA) to detect cluster and/or outlier from functional waterpoint and Not Functional water points of Nigeria

### 2.3.1 Functional waterpoint

#### 2.3.1.1  Computing local Moran's I

I use shapeID column because there are duplication "Bassa, Ifelodun, Irepodun, Nasarawa, Obi, Surulere" in shapename column

```{r}
fips <- order(nga_wp$shapeID)
localMI <- localmoran(nga_wp$`wpt functional`, rswm_q)
head(localMI)
```

localmoran() function returns a matrix of values whose columns are:

Ii: the local Moran's I statistics

E.Ii: the expectation of local moran statistic under the randomisation hypothesis

Var.Ii: the variance of local moran statistic under the randomisation hypothesis

Z.Ii:the standard deviate of local moran statistic

Pr(): the p-value of local moran statistic

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=nga_wp$shapeID[fips]),
  check.names=FALSE)
```

-   Mapping the local Moran's I: I append the local Moran's I dataframe onto Nigeria spatial polygon dataframe

```{r}
nga_wp.localMI <- cbind(nga_wp,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

-   Mapping local Moran's I values: Using choropleth mapping functions of tmap package,I plot the local Moran's I values by using the code chinks below

```{r}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

-   Mapping local Moran's I p-values

```{r}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

-   Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

#### 2.3.1.2 Creating a LISA Cluster Map

##### (1) Plotting Moran scatterplot

```{r}
nci <- moran.plot(nga_wp$`wpt functional`, rswm_q,
                  labels=as.character(nga_wp$shapeName), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

the plot is split in 4 quadrants.

##### (2)  Plotting Moran scatterplot with standardised variable

```{r}
nga_wp$Z.wpt_functional <- scale(nga_wp$`wpt functional`) %>% 
  as.vector 
```

```{r}
nci2 <- moran.plot(nga_wp$Z.wpt_functional, rswm_q,
                   labels=as.character(nga_wp$shapeName),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

##### (3) Preparing LISA map classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

```{r}
nga_wp$lag_wpt_functional <- lag.listw(rswm_q, nga_wp$`wpt functional`)
DV <- nga_wp$lag_wpt_functional - mean(nga_wp$lag_wpt_functional)     
```

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

```{r}
signif <- 0.05       
```

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      
```

```{r}
quadrant[localMI[,5]>signif] <- 0
```

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
nga_wp$lag_wpt_functional <- lag.listw(rswm_q, nga_wp$`wpt functional`)
DV <- nga_wp$lag_wpt_functional - mean(nga_wp$lag_wpt_functional)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

##### (4) Plotting LISA map

```{r}
nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

```{r}
gdppc <- qtm(nga_wp, "wpt functional")

nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

### 2.3.2 Not Functional Waterpoint

#### 2.3.1.1  Computing local Moran's I

I use shapeID column because there are duplication "Bassa, Ifelodun, Irepodun, Nasarawa, Obi, Surulere" in shapename column

```{r}
fips <- order(nga_wp$shapeID)
localMI <- localmoran(nga_wp$`wpt non-functional`, rswm_q)
head(localMI)
```

localmoran() function returns a matrix of values whose columns are:

Ii: the local Moran's I statistics

E.Ii: the expectation of local moran statistic under the randomisation hypothesis

Var.Ii: the variance of local moran statistic under the randomisation hypothesis

Z.Ii:the standard deviate of local moran statistic

Pr(): the p-value of local moran statistic

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=nga_wp$shapeID[fips]),
  check.names=FALSE)
```

-   Mapping the local Moran's I: I append the local Moran's I dataframe onto Nigeria spatial polygon dataframe

```{r}
nga_wp.localMI <- cbind(nga_wp,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

-   Mapping local Moran's I values: Using choropleth mapping functions of tmap package,I plot the local Moran's I values by using the code chinks below

```{r}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

-   Mapping local Moran's I p-values

```{r}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

-   Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

#### 2.3.1.2 Creating a LISA Cluster Map

##### (1) Plotting Moran scatterplot

```{r}
nci <- moran.plot(nga_wp$`wpt non-functional`, rswm_q,
                  labels=as.character(nga_wp$shapeName), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

the plot is split in 4 quadrants.

##### (2)  Plotting Moran scatterplot with standardised variable

```{r}
nga_wp$Z.wpt_nonfunctional <- scale(nga_wp$`wpt non-functional`) %>% 
  as.vector 
```

```{r}
nci2 <- moran.plot(nga_wp$Z.wpt_nonfunctional, rswm_q,
                   labels=as.character(nga_wp$shapeName),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

##### (3) Preparing LISA map classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

```{r}
nga_wp$lag_wpt_nonfunctional <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)
DV <- nga_wp$lag_wpt_nonfunctional - mean(nga_wp$lag_wpt_nonfunctional)     
```

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

```{r}
signif <- 0.05       
```

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      
```

```{r}
quadrant[localMI[,5]>signif] <- 0
```

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
nga_wp$lag_wpt_nonfunctional <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)
DV <- nga_wp$lag_wpt_nonfunctional - mean(nga_wp$lag_wpt_nonfunctional)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

##### (4) Plotting LISA map

```{r}
nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

```{r}
gdppc <- qtm(nga_wp, "wpt non-functional")

nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

# 3 Hot Spot Area analysis

## 3.1 Getis and Ord's G-Statistics

Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

## 3.2 Deriving distance-based weight matrix

First, I define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

### 3.2.1 Deriving the centroid

To get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

### 3.2.2 Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 71.66 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### 3.2.3 Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

## 3.3 Computing adaptive distance weight matrix

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## 3.4 Computing Gi statistics and Visualize Hot Spot Area

### 3.4.1 Functional water point

#### (1) Gi statistics using fixed distance

```{r}
fips <- order(nga_wp$shapeName)
gi.fixed <- localG(nga_wp$`wpt functional`
, wm62_lw)
gi.fixed
```

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

```{r}
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

#### (2) Mapping Gi values with fixed distance weights

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc <- qtm(nga_wp, "wpt functional")

Gimap <-tm_shape(nga_wp.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

#### (3) Gi statistics using adaptive distance

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).

```{r}
fips <- order(nga_wp$shapeName)
gi.adaptive <- localG(nga_wp$`wpt functional`
, knn_lw)
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

#### (4) Mapping Gi values with adaptive distance weights

Now I visualize the location of hot spot and cold spot area. The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(nga_wp, "wpt functional")

Gimap <- tm_shape(nga_wp.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

### 3.4.2 Not Functional water points

#### (1) Gi statistics using fixed distance

```{r}
fips <- order(nga_wp$shapeName)
gi.fixed <- localG(nga_wp$`wpt non-functional`
, wm62_lw)
gi.fixed
```

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

```{r}
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

#### (2) Mapping Gi values with fixed distance weights

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc <- qtm(nga_wp, "wpt non-functional")

Gimap <-tm_shape(nga_wp.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

#### (3) Gi statistics using adaptive distance

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).

```{r}
fips <- order(nga_wp$shapeName)
gi.adaptive <- localG(nga_wp$`wpt non-functional`
, knn_lw)
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

#### (4) Mapping Gi values with adaptive distance weights

Now I visualize the location of hot spot and cold spot area. The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(nga_wp, "wpt non-functional")

Gimap <- tm_shape(nga_wp.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

### 
