---
title: "Take home ex1"
format: html
editor: visual
---

## Overviewd

## 1 Import data

First of all we load the package that needed: sf, spdep, tmap, tidyverse,dplyr, funModeling

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse,dplyr, funModeling)
```

There are two dataset we used:

-   geo_export:

-   nga_admbnda_adm2_osgof_20190417

change it to shorter name

### 1.1 import waterpoint

```{r}
##| eval: false
wp<- st_read(dsn="geodata",
             layer="geo_export",
             crs=4326) %>%
  filter(clean_coun=="Nigeria")
```

in the

Then I saved it into wp_nga.rds. In this way I can delete geo_export data which is too large to git push.

I add #eval: false to make sure the code chunk will only display

[ref](https://quarto.org/docs/computations/execution-options.html)

```{r}
##| eval: false
wp_nga<-write_rds(wp,"geodata/wp_nga.rds")
```

### 1.2 import Nigeria LGA boundary data

```{r}
#| eval: false
nga<- st_read(dsn="geodata",
             layer="geoBoundaries-NGA-ADM2",
             crs=4326)
```

## 2 Data Wrangling

### 2.1 Recoding NA values into string

In the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.

```{r}
#| eval: false
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### 2.2 EDA

In the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.

```{r}
freq(data=wp_nga, 
     input = 'status_cle')
```

## 3 Extracting Water Point Data

In this section, we will extract the water point records by using classes in status_cle field.

### 3.1 Extracting the functional water point data

in this code chunk below, filter() is used to select functional water points

```{wpt_functional <- wp_nga %>%}
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

### 3.2 Extracting non-funtional water point

In the code chunk below, filter() of dplyr is used to select non-functional water points.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### 3.3 Extracting water point with Unknown class

In the code chunk below, `filter()` of dplyr is used to select water points with unknown status.

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

```{r}
freq(data=wpt_unknown, 
     input = 'status_cle')
```

## Performing Point-in-Polygon Count

The point-in-polygon (PIP) problem asks whether a given point in the plane lies inside, outside, or on the boundary of a polygon.

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Things to learn from the code chunk above:

`mutate()` of **dplyr** package is used to derive two fields namely pct_functional and pct_non-functional.

to keep the file size small, `select()` of **dplyr** is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.

Now, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
write_rds(nga_wp, "geodata/nga_wp.rds")
```

There is only data file we use, nga_wp.rds, which is the combination of the geospatial and aspatial data.

## Visualising the spatial dsitribution of water points

```{r}
#| fig-width: 14
#| fig-height: 12
nga_wp <- read_rds("geodata/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```

## Outliers/clusters analysis

## Hotspot area analysis
