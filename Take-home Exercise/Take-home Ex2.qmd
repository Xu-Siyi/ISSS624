---
title: "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods"
author: "Xu Siyi"
date: "`r Sys.Date()`"
format: html
editor: visual
---

## Overview

## Getting Started

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Data Import

### Import water point data

```{r}
#| eval: false
wp <- read_csv("Take home 2 data/WPdx.csv",show_col_types = FALSE) %>%
  filter(`#clean_country_name` == "Nigeria")
```

-   I use `show_col_types = FALSE` to avoid warning message.

-   To extract Nigeria data I use `filter()`

I saved it into wp_nga.rds. In this way I can delete geo_export data which is too large to git push.

```{r}
#| eval: false

wp_nga<-write_rds(wp,"Take home 2 data/wp_nga.rds")
```

```{r}

wp_nga <- read_rds("Take home 2 data/wp_nga.rds") 
```

#### Convert wkt data

Column '*New Georaferenced Column*' represent spatial data in a textual format. this kind of text file is popularly known as **Well Known Text** in short **wkt**.

![](images/paste-D42CF081.png)

Two steps will be used to convert an asptial data file in wkt format into a sf data frame by using sf.

First, `st_as_sfc()` of sf package is used to derive a new field called *Geometry* as shown in the code chunk below.

```{r}
#| eval: false
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
```

Now we get the new column called Geometry.

![](images/paste-0F5EA02B.png)

Next, `st_sf()` will be used to convert the tibble data frame into sf data frame.

```{r}
wp_sf <- st_sf(wp_nga, crs=4326) 
```

When the process completed, a new sf data frame called *wp_sf* will be created.

### Importing Nigeria LGA level boundary data

```{r}
nga<- st_read(dsn="Take home 2 data",
             layer="geoBoundaries-NGA-ADM2",
             crs=4326)
```

### Point in Polygon Overlay

To make sure the data accuracy, we are going to use a geoprocessing function (or commonly know as GIS analysis) called **point-in-polygon overlay** to transfer the attribute information in *nga* sf data frame into *wp_sf* data frame.

```{r}
wp_sf <- st_join(wp_sf, nga)
```

Now we have column called "shapeName", which is the LGA name of Nigeria water point.

![](images/paste-548FE3DC.png)

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

### Saving the Analytical Data Table

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(., 3:4, 9:10, 18:23)
```

Things to learn from the code chunk above:

`mutate()` of **dplyr** package is used to derive two fields namely pct_functional and pct_non-functional.

to keep the file size small, `select()` of **dplyr** is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.

Now, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
write_rds(nga_wp, "Take home 2 data/nga_wp.rds")
```

There is only data file we use, nga_wp.rds, which is the combination of the geospatial and aspatial data.

## Data Wrangling

The reference of the code chunk in Data Wrangling part: [Ong Zhi Rong Jordan](https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#visualising-of-distribution-using-ggplot)

### **Checking of duplicated area name**

We use `duplicate` function to retrieve all the shapeName that has duplicates and store it in a list. From the result below, we identified **12** shapeNames that are duplicates.

```{r}
nga <- (nga[order(nga$shapeName), ])

duplicate_area <- nga$shapeName[ nga$shapeName %in% nga$shapeName[duplicated(nga$shapeName)] ]

duplicate_area
```

Next, we will leverage on the interactive viewer of `tmap` to check the location of each area. Through the use of Google, we are able to retrieve the actual name and state of the areas. The table below shows the index and the actual name of the area.

| Index | Actual Area Name |
|-------|------------------|
| 94    | Bassa (Kogi)     |
| 95    | Bassa (Plateau)  |
| 304   | Ifelodun (Kwara) |
| 305   | Ifelodun (Osun)  |
| 355   | Irepodun (Kwara) |
| 356   | Irepodun (Osun)  |
| 518   | Nassarawa        |
| 546   | Obi (Benue)      |
| 547   | Obi(Nasarawa)    |
| 693   | Surulere (lagos) |
| 694   | Surulere (Oyo)   |

```{r}
tmap_mode("view")

tm_shape(nga[nga$shapeName %in% duplicate_area,]) +
  tm_polygons()
```

Make sure the tmap mode set back to plot

```{r}
tmap_mode("plot")
```

We will now access the individual index of the `nga` data frame and change the value. Lastly, we use the [`length()`](https://rdrr.io/r/base/length.html) function to ensure there is no more duplicated shapeName.

```{r}
nga$shapeName[c(94,95,304,305,355,356,519,546,547,693,694)] <- c("Bassa (Kogi)","Bassa (Plateau)",
                                                                               "Ifelodun (Kwara)","Ifelodun (Osun)",
                                                                               "Irepodun (Kwara)","Irepodun (Osun)",
                                                                               "Nassarawa","Obi (Benue)","Obi(Nasarawa)",
                                                                               "Surulere (Lagos)","Surulere (Oyo)")

length((nga$shapeName[ nga$shapeName %in% nga$shapeName[duplicated(nga$shapeName)] ]))
```

### **Projection of sf dataframe**

```{r}
#| eval: false
ngaT <- wp_sf  %>%
  rename ("Country" = "#clean_country_name",
          "clean_adm2" = "#clean_adm2",
          "status" = "#status_clean",
          "lat" = "#lat_deg",
          "long" = "#lon_deg") %>%
  select (clean_adm2,status,lat,long) %>%
  mutate(status = replace_na(status, "Unknown"))

ngaT_sf <- st_as_sf(ngaT, coords = c("long", "lat"),  crs = 4326)
```

```{r}
ngaT_sf <- st_transform(ngaT_sf, crs = 26391)

st_crs (nga)
st_crs (ngaT_sf)
```

### 

## Derive new variables

::: callout-caution
## Take-home Exercise 2 Objective

In this take-home exercise you are required to regionalise Nigeria by using, but not limited to the following measures:

-   Total number of functional water points

-   Total number of nonfunctional water points

-   Percentage of functional water points

-   Percentage of non-functional water points

-   Percentage of main water point technology (i.e. Hand Pump)

-   Percentage of usage capacity (i.e. \< 1000, \>=1000)

-   Percentage of rural water points
:::

What we have:

-   Total number of functional water points

-   Total number of nonfunctional water points

    What we need to derive:

### 

## Exploratory Data Analysis (EDA)

### EDA using statistical graphics

I plot the distribution of the variables (i.e. Number of functional water point) by using Histogram graph.

The reference of the code chunk below: [Ong Zhi Rong Jordan](https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#visualising-of-distribution-using-ggplot)

```{r,fig.height=5,fig.width=6}
ggplot(data= ngaT_sf, 
       aes(x= fct_infreq(status))) +
  geom_bar(aes(fill = status), show.legend = FALSE) +
  geom_text(stat = 'count',
           aes(label= paste0(after_stat(count), ', ', 
                             round(after_stat(count)/sum(after_stat(count))*100, 
                             2), '%')), vjust= -0.5, size= 2.5) +
  labs(y= 'No. of\nOccurence', x= 'Status',
       title = "Distribution of Water Tap Status") +
  theme(axis.title.y= element_text(angle=0), axis.ticks.x= element_blank(),
        panel.background= element_blank(), axis.line= element_line(color= 'grey'),
        axis.text.x = element_text(angle = 90, vjust = 0.5))
```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```
